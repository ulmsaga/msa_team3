name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'services/configserver/**'
      - 'helmcharts/configserver/**'
#
jobs:
  build:
    runs-on: self-hosted
    timeout-minutes: 5

    env:
      DOCKER_USERNAME: sclee1115
      IMAGE_NAME: group1-team3-lsc-configserver
      DOCKER_HOST: unix:///var/run/docker.sock  # Docker 호스트 설정 추가

    steps:
      # GitHub Checkout
      - name: Checkout
        uses: actions/checkout@v2

      # QEMU 설치
      - name: Install QEMU dependencies
        run: |
          sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak
          sudo tee /etc/apt/sources.list > /dev/null << 'EOF'
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu focal main restricted universe multiverse
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu focal-updates main restricted universe multiverse
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu focal-backports main restricted universe multiverse
          deb [arch=amd64] http://security.ubuntu.com/ubuntu focal-security main restricted universe multiverse
          EOF
          sudo dpkg --add-architecture amd64
          sudo apt-get update
          sudo apt-get install -y qemu-user qemu-user-static

      # Docker 권한 설정
      - name: Setup Docker permissions
        run: |
          sudo chown $USER:docker /var/run/docker.sock
          sudo chmod 666 /var/run/docker.sock

      # Docker 데몬 실행
      - name: Check Docker daemon
        run: |
          docker info
          docker version

      # QEMU 설정
      - name: Check Docker daemon
        run: |
          sudo systemctl status docker || true
          sudo systemctl start docker || true
          docker info

      # QEMU 설정
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/amd64,linux/arm64

      # Docker Buildx 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/amd64,linux/arm64

      # JDK 21 설치
      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '21'
          architecture: 'x64'
          cache: 'maven'

      # Maven 빌드 전 필요한 라이브러리 설치
      - name: Install required libraries
        run: |
          sudo apt-get update
          sudo apt-get install -y libc6-amd64-cross

      # Maven 빌드
      - name: Build with Maven
        run: |
          cd services/configserver
          export QEMU_LD_PREFIX=/usr/x86_64-linux-gnu
          # Maven 메모리 설정 최적화
          export MAVEN_OPTS="-Xmx2g -Xms1g"
          mvn -v
          mvn clean package -DskipTests \
            --batch-mode \
            -Dmaven.wagon.http.pool=false \
            -Dmaven.test.skip=true

      # - name: Build with Maven
      #   run: |
      #     cd services/configserver
      #     export QEMU_LD_PREFIX=/usr/x86_64-linux-gnu
      #     mvn -v
      #     mvn clean package -DskipTests


      # 버전 정보 가져오기
      - name: Get version
        id: get_version
        run: |
          cd services/configserver
          export QEMU_LD_PREFIX=/usr/x86_64-linux-gnu
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      # Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}  # GitHub Secrets에 추가 필요

      # Docker Buildx 빌드
      - name: Build & Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./services/configserver
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}

      # - name: Build & Push Docker image
      #   run: |
      #     cd services/configserver
      #     docker build -t ${DOCKER_USERNAME}/${IMAGE_NAME}:${VERSION} .
      #     docker push ${DOCKER_USERNAME}/${IMAGE_NAME}:${VERSION}

      # Git 설치
      - name: Install Git
        run: |
          sudo apt-get update
          sudo apt-get install -y git

      # Helm 업데이트
      # Helm 업데이트
      - name: Update Helm values
        run: |
          cd helmcharts/configserver
          echo "Current directory: $(pwd)"
          echo "Current values.yaml content:"
          cat values.yaml
          # Linux 환경에 맞는 sed 명령어 사용
          sed -i "s/tag: .*$/tag: \"${VERSION}\"/" values.yaml
          echo "Updated values.yaml content:"
          cat values.yaml
          # Git 설정 및 커밋
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config --global user.email "sclee1115@gmail.com"
          git config --global user.name "ulmsaga"
          git add values.yaml
          git commit -m "Update image version to ${VERSION}"
          git push origin main

      # - name: Update Helm values
      #   run: |
      #     cd helmcharts/configserver
      #     sed -i '' "s/tag: .*$/tag: \"${VERSION}\"/" values.yaml
      #     git config --local user.email "sclee1115@gmail.com"
      #     git config --local user.name "ulmsaga"
      #     git add values.yaml
      #     git commit -m "Update image version to ${VERSION}"
      #     git push